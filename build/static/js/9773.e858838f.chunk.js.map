{"version":3,"file":"static/js/9773.e858838f.chunk.js","mappings":"6LAYA,MAAMA,GAAkBC,EAAAA,EAAAA,aACtB,CAACC,EAAOC,KAKJC,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,UAAWC,IAAW,eAAgBL,EAAMM,YAC5CC,QAASP,EAAMO,QACfC,MAAOR,EAAMQ,MACbC,SATsBC,KACxBC,QAAQC,IAAI,qBAAqB,EAS/BX,IAAKA,MAOPY,GAA2Bd,EAAAA,EAAAA,aAG/B,CAACC,EAAOC,KACRa,EAAAA,EAAAA,MAAA,OAAKV,UAAU,6BAA6BH,IAAKA,EAAIc,SAAA,EACnDb,EAAAA,EAAAA,KAAA,SACEC,KAAK,OACLC,UAAWC,IAAW,eAAgBL,EAAMM,YAC5CC,QAASP,EAAMO,QACfC,MAAOR,EAAMQ,MACbQ,UAAQ,KAEVd,EAAAA,EAAAA,KAAA,QAAME,UAAU,kDAAiDW,UAC/Db,EAAAA,EAAAA,KAAA,KAAGE,UAAU,kCA8DnB,IApC0BJ,IAExB,MAAMiB,GAC2B,KAA9BjB,EAAMkB,YAAa,IAClBhB,EAAAA,EAAAA,KAACJ,EAAe,CAACQ,WAAYN,EAAMM,cAEnCJ,EAAAA,EAAAA,KAACW,EAAwB,CAACP,WAAYN,EAAMM,aAGhD,OACEJ,EAAAA,EAAAA,KAAAiB,EAAAA,SAAA,CAAAJ,UAEEb,EAAAA,EAAAA,KAACkB,IAAU,CACTC,kBAAmBrB,EAAMqB,mBAAqB,SAC9CC,aAActB,EAAMsB,aACpBC,UAAWvB,EAAMuB,UACjBC,QAASxB,EAAMwB,QACfC,SAAUzB,EAAMQ,MAChBC,SAAWiB,GAAS1B,EAAMS,SAASiB,GACnCC,YAAaV,EACbW,cAAe5B,EAAM6B,GACrBC,eAAgB9B,EAAM8B,eACtBC,WAAY/B,EAAM+B,YAAc,UAChCC,YAAahC,EAAMgC,YACnBC,WAAYjC,EAAMiC,YAAc,aAChCC,QAASlC,EAAMkC,QACfC,QAASnC,EAAMmC,QACfC,YAAapC,EAAMoC,YACnBC,mBAAoBrC,EAAMqC,mBAC1BC,OAAQtC,EAAMsC,OACdC,aAAa,SAEd,C,+ECxDP,IA7BmBvC,IAEfE,EAAAA,EAAAA,KAACsC,EAAAA,EAAG,CAAAzB,UACFb,EAAAA,EAAAA,KAACuC,EAAAA,EAAG,CAAA1B,UACFD,EAAAA,EAAAA,MAAA,OAAKV,UAAU,iBAAgBW,SAAA,EAC7Bb,EAAAA,EAAAA,KAAA,MAAIE,UAAU,aAAYW,SAAEf,EAAM0C,SAClCxC,EAAAA,EAAAA,KAAA,OAAKE,UAAU,mBAAkBW,UAC/BD,EAAAA,EAAAA,MAAC6B,EAAAA,EAAU,CAACC,UAAW,CAAExC,UAAW,OAAQW,SAAA,EAC1Cb,EAAAA,EAAAA,KAACyC,EAAAA,EAAAA,KAAe,CAACE,KAAK,IAAG9B,SAAC,YAExBf,EAAM8C,iBAAmB,IAAIC,KAAI,CAACC,EAAMC,IACjCD,EAAKE,QACVhD,EAAAA,EAAAA,KAACyC,EAAAA,EAAAA,KAAe,CAACO,QAAM,EAAAnC,SACpBiC,EAAKG,OADqBF,IAI7B/C,EAAAA,EAAAA,KAACyC,EAAAA,EAAAA,KAAe,CAAaE,KAAMG,EAAKI,KAAKrC,SAC1CiC,EAAKG,OADcF,gB,oHCmBxC,MAzCqBI,IAQkB,IANrC,cACAC,EAAa,SACbC,EAAQ,SACRxC,EAAQ,SACRyC,EAAQ,UACRC,GAC+BJ,EAI/B,MAAMK,GAAUC,EAAAA,EAAAA,IAAqB,CAAEL,gBAAeC,cAChD,aACJK,EAAY,SACZC,EAAQ,QACRC,EACAC,WAAW,OAAEC,IACXN,EAEJ,OACExD,EAAAA,EAAAA,KAAA,QAAMsD,SAAUI,EAAaJ,GAAWpD,UAAWqD,EAAWQ,YAAU,EAAAlD,SACrEmD,MAAMC,QAAQpD,GACXA,EAASgC,KAAKqB,GACLA,EAAMpE,OAASoE,EAAMpE,MAAMqE,KAC9BC,EAAAA,cAAoBF,EAAMjE,KAAM,IAC3B,IACEiE,EAAMpE,MACT6D,WACAU,IAAKH,EAAMpE,MAAMqE,KACjBL,SACAF,aAGJM,IAENrD,GACC,E,qBCvBX,MAAMyD,EAAenB,IAWE,IAXD,KACpBlD,EAAI,KACJkE,EAAI,YACJI,EAAW,SACXZ,EAAQ,OACRG,EAAM,KACNU,EAAI,KACJC,EAAI,UACJvE,EAAS,YACTwE,KACGC,GACYxB,EACf,OACEvC,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAJ,SAAA,EACEb,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,QAAY,CACX3E,KAAMA,EACNsE,YAAaA,EACbJ,KAAMA,EACNU,GAAIL,EACJM,GAAIX,EACJpE,IAAMgF,IACAL,GAAaA,EAAYK,EAAE,EAEjC7E,UAAWA,EACX8E,aAAWlB,IAAUA,EAAOK,OACvBR,EAAWA,EAASQ,GAAQ,CAAC,EAClCM,KAAMA,KACFE,IAGLb,GAAUA,EAAOK,IAChBnE,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,QAAAA,SAAqB,CAAC3E,KAAK,UAAUC,UAAU,UAASW,SACtDiD,EAAOK,GAAe,UAEvB,OACH,EAKDc,EAAaC,IAYI,IAZH,KAClBjF,EAAI,MACJgD,EAAK,KACLkB,EAAI,YACJI,EAAW,SACXZ,EAAQ,OACRG,EAAM,KACNU,EAAI,KACJC,EAAI,UACJvE,EAAS,YACTwE,KACGC,GACYO,EACf,OACEtE,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAJ,SAAA,EACEb,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,MAAU,CACT3E,KAAMA,EACNgD,MAAOA,EACPkB,KAAMA,EACNW,GAAIX,EACJpE,IAAMgF,IACAL,GAAaA,EAAYK,EAAE,EAEjC7E,UAAWA,EACX8E,aAAWlB,IAAUA,EAAOK,OACvBR,EAAWA,EAASQ,GAAQ,CAAC,KAC9BQ,IAGLb,GAAUA,EAAOK,IAChBnE,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,QAAAA,SAAqB,CAAC3E,KAAK,UAASY,SAClCiD,EAAOK,GAAe,UAEvB,OACH,EAKDgB,EAAcC,IAYG,IAZF,KACnBnF,EAAI,MACJgD,EAAK,KACLkB,EAAI,YACJI,EAAW,SACXZ,EAAQ,OACRG,EAAM,KACNU,EAAI,KACJC,EAAI,UACJvE,EAAS,YACTwE,KACGC,GACYS,EACf,OACExE,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAJ,SAAA,EACEb,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,OAAW,CACV3E,KAAMA,EACNgD,MAAOA,EACPkB,KAAMA,EACNW,GAAIX,EACJpE,IAAMgF,IACAL,GAAaA,EAAYK,EAAE,EAEjC7E,UAAWA,EACX8E,aAAWlB,IAAUA,EAAOK,OACvBR,EAAWA,EAASQ,GAAQ,CAAC,KAC9BQ,IAGLb,GAAUA,EAAOK,IAChBnE,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,QAAAA,SAAqB,CAAC3E,KAAK,UAASY,SAClCiD,EAAOK,GAAe,UAEvB,OACH,EAKDkB,EAAiBC,IAaA,IAbC,UACtBC,EAAS,KACTtF,EAAI,KACJkE,EAAI,YACJI,EAAW,KACXC,EAAI,SACJb,EAAQ,OACRG,EAAM,KACNW,EAAI,UACJvE,EAAS,cACTsF,EAAa,YACbd,KACGC,GACYW,EACf,OACE1E,EAAAA,EAAAA,MAAC6E,EAAAA,EAAU,CAAA5E,SAAA,EACTb,EAAAA,EAAAA,KAACyF,EAAAA,EAAAA,KAAe,CAACvF,UAAWsF,EAAc3E,SAAE0E,IAClC,WAATtF,GACCD,EAAAA,EAAAA,KAACmF,EAAW,CACVlF,KAAMA,EACNkE,KAAMA,EACNI,YAAaA,EACbG,YAAaA,EACbF,KAAMA,EACNV,OAAQA,EACRH,SAAUA,EACVzD,UAAWA,EACXuE,KAAMA,KACFE,KAGN3E,EAAAA,EAAAA,KAACsE,EAAY,CACXrE,KAAMA,EACNkE,KAAMA,EACNI,YAAaA,EACbG,YAAaA,EACbF,KAAMA,EACNV,OAAQA,EACRH,SAAUA,EACVzD,UAAWA,EACXuE,KAAMA,KACFE,MAGG,EAwIjB,MApIkBe,IAiBK,IAjBJ,UACjBH,EAAS,MACTtC,EAAK,KACLhD,EAAI,KACJkE,EAAI,YACJI,EAAW,SACXZ,EAAQ,OACRG,EAAM,QACNF,EAAO,UACP1D,EAAS,eACTyF,EAAc,eACdC,EAAc,cACdJ,EAAa,YACbd,EAAW,OACXmB,EAAM,KACNpB,KACGE,GACYe,EAEf,MAAMlB,EACK,aAATvE,EAAsB,WAAsB,WAATA,EAAoB,SAAW,QAEpE,OACED,EAAAA,EAAAA,KAAAiB,EAAAA,SAAA,CAAAJ,SACY,WAATZ,GACCD,EAAAA,EAAAA,KAAA,SACEC,KAAMA,EACNkE,KAAMA,KACDR,EAAWA,EAASQ,GAAQ,CAAC,KAC9BQ,KAGN3E,EAAAA,EAAAA,KAAAiB,EAAAA,SAAA,CAAAJ,SACY,aAATZ,GAAgC,UAATA,GACtBD,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,MAAU,CAAC1E,UAAW0F,EAAe/E,UACpCb,EAAAA,EAAAA,KAACiF,EAAU,CACThF,KAAMA,EACNgD,MAAOA,EACPkB,KAAMA,EACNI,YAAaA,EACbG,YAAaA,EACbZ,OAAQA,EACRH,SAAUA,EACVa,KAAMA,EACNtE,UAAWA,EACXuE,KAAMA,KACFE,MAGG,WAAT1E,GACFW,EAAAA,EAAAA,MAACgE,EAAAA,EAAAA,MAAU,CAAC1E,UAAW0F,EAAe/E,SAAA,CACnCoC,GACCrC,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAJ,SAAA,EACEb,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,MAAU,CAAC1E,UAAWyF,EAAe9E,SAAEoC,IACvC4C,GAAUA,KAEX,KACHN,GACCvF,EAAAA,EAAAA,KAACqF,EAAc,CACbpF,KAAMA,EACNsF,UAAWA,EACXpB,KAAMA,EACNK,KAAMA,EACNgB,cAAeA,EACfjB,YAAaA,EACbG,YAAaA,EACbZ,OAAQA,EACRH,SAAUA,EACVzD,UAAWA,EACXuE,KAAMA,KACFE,KAGN3E,EAAAA,EAAAA,KAACmF,EAAW,CACVlF,KAAMA,EACNkE,KAAMA,EACNI,YAAaA,EACbG,YAAaA,EACbZ,OAAQA,EACRH,SAAUA,EACVa,KAAMA,EACNtE,UAAWA,EACXuE,KAAMA,KACFE,QAKV/D,EAAAA,EAAAA,MAACgE,EAAAA,EAAAA,MAAU,CAAC1E,UAAW0F,EAAe/E,SAAA,CACnCoC,GACCrC,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAJ,SAAA,EACEb,EAAAA,EAAAA,KAAC4E,EAAAA,EAAAA,MAAU,CAAC1E,UAAWyF,EAAe9E,SAAEoC,IACvC4C,GAAUA,KAEX,KACHN,GACCvF,EAAAA,EAAAA,KAACqF,EAAc,CACbpF,KAAMA,EACNsF,UAAWA,EACXpB,KAAMA,EACNK,KAAMA,EACNgB,cAAeA,EACfjB,YAAaA,EACbG,YAAaA,EACbZ,OAAQA,EACRH,SAAUA,EACVzD,UAAWA,EACXuE,KAAMA,KACFE,KAGN3E,EAAAA,EAAAA,KAACsE,EAAY,CACXrE,KAAMA,EACNkE,KAAMA,EACNI,YAAaA,EACbG,YAAaA,EACbZ,OAAQA,EACRH,SAAUA,EACVa,KAAMA,EACNtE,UAAWA,EACXuE,KAAMA,KACFE,UAOf,C,2OChPP,MAvEoBxB,IAAoC,IAAnC,QAAE2C,GAA2B3C,EAChD,OACEnD,EAAAA,EAAAA,KAACsC,EAAAA,EAAG,CAAAzB,UACFb,EAAAA,EAAAA,KAACuC,EAAAA,EAAG,CAACwD,GAAI,GAAGlF,UACVb,EAAAA,EAAAA,KAACgG,EAAAA,EAAI,CAAAnF,UACHb,EAAAA,EAAAA,KAACgG,EAAAA,EAAAA,KAAS,CAAAnF,UACRD,EAAAA,EAAAA,MAAC0B,EAAAA,EAAG,CAACpC,UAAU,qBAAoBW,SAAA,EACjCD,EAAAA,EAAAA,MAAC2B,EAAAA,EAAG,CAAC0D,GAAI,OAAOpF,SAAA,EACdD,EAAAA,EAAAA,MAAA,SAAOV,UAAU,6BAA4BW,SAAA,EAC3Cb,EAAAA,EAAAA,KAACkG,EAAAA,EAAY,CACXC,KAAK,aACLjG,UAAU,2BACV,gBAIJU,EAAAA,EAAAA,MAACwF,EAAAA,EAAQ,CAAClG,UAAU,gBAAeW,SAAA,EACjCD,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,OAAe,CACdvB,GAAG,IACHlC,KAAK,IACLzC,UAAU,yBAAwBW,SAAA,CACnC,iBAECb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,8CAEfU,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAAvF,SAAA,EACZD,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAAvF,SAAA,EACZb,EAAAA,EAAAA,KAACkG,EAAAA,EAAY,CACXhG,UAAU,yBACViG,KAAK,eACS,oBAGlBvF,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAAvF,SAAA,EACZb,EAAAA,EAAAA,KAACkG,EAAAA,EAAY,CACXhG,UAAU,yBACViG,KAAK,cACS,kBAGlBnG,EAAAA,EAAAA,KAACoG,EAAAA,EAAAA,QAAgB,KACjBxF,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAAvF,SAAA,EACZb,EAAAA,EAAAA,KAACkG,EAAAA,EAAY,CACXhG,UAAU,yBACViG,KAAK,gBACS,qBAGlBvF,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAAvF,SAAA,EACZb,EAAAA,EAAAA,KAACkG,EAAAA,EAAY,CACXhG,UAAU,yBACViG,KAAK,gBACS,4BAMxBnG,EAAAA,EAAAA,KAACuC,EAAAA,EAAG,CAACrC,UAAU,2BAA0BW,UACvCD,EAAAA,EAAAA,MAACyF,EAAAA,EAAM,CAAChG,QAASA,IAAMyF,EAAQ,UAAW,aAAajF,SAAA,EACrDb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,kBAAoB,yBAOzC,E,+BCUV,MAxEkBJ,IAChB,MAAMwG,EAAOxG,EAAMwG,MAAQ,CAAC,EAE5B,OACEtG,EAAAA,EAAAA,KAAA,OAAKE,UAAU,kBAAiBW,UAC9Bb,EAAAA,EAAAA,KAACgG,EAAAA,EAAI,CAAC9F,UAAU,cAAaW,UAC3BD,EAAAA,EAAAA,MAACoF,EAAAA,EAAAA,KAAS,CAAC9F,UAAU,MAAKW,SAAA,EACxBD,EAAAA,EAAAA,MAACwF,EAAAA,EAAQ,CAAClG,UAAU,YAAYqG,MAAM,MAAK1F,SAAA,EACzCb,EAAAA,EAAAA,KAACoG,EAAAA,EAAAA,OAAe,CACdvB,GAAG,IACH3E,UAAU,uCAAsCW,UAEhDb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gCAGfU,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAAvF,SAAA,EACZD,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAAvF,SAAA,EACZb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,0BAA4B,WAE3CU,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAAvF,SAAA,EACZb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,2BAA6B,iBAE5CU,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAClG,UAAU,eAAcW,SAAA,EACrCb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,sBAAwB,YAEvCF,EAAAA,EAAAA,KAACoG,EAAAA,EAAAA,QAAgB,KACjBxF,EAAAA,EAAAA,MAACwF,EAAAA,EAAAA,KAAa,CAAClG,UAAU,cAAaW,SAAA,EACpCb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,uBAAyB,mBAK5CF,EAAAA,EAAAA,KAAA,MAAIE,UAAU,kBAAiBW,UAC7Bb,EAAAA,EAAAA,KAACwG,EAAAA,GAAI,CAACC,GAAG,IAAIvG,UAAU,YAAWW,SAC/ByF,EAAK9D,WAIVxC,EAAAA,EAAAA,KAAA,QACEE,UAAWC,IAAW,QAAS,CAC7B,oBAAuC,SAAlBmG,EAAKI,SAC1B,qBAAwC,WAAlBJ,EAAKI,SAC3B,qBAAwC,QAAlBJ,EAAKI,WAC1B7F,SAEFyF,EAAKI,YAGR9F,EAAAA,EAAAA,MAAA,KAAGV,UAAU,YAAWW,SAAA,EACtBb,EAAAA,EAAAA,KAAA,OACE2G,IAAKL,EAAKM,WACVC,IAAI,GACJ3G,UAAU,mCAGZU,EAAAA,EAAAA,MAAA,QAAMV,UAAU,sCAAqCW,SAAA,EACnDb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,yCACZoG,EAAKQ,kBAGRlG,EAAAA,EAAAA,MAAA,QAAMV,UAAU,iCAAgCW,SAAA,EAC9Cb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,yCACZoG,EAAKS,iBAAiB,IAAET,EAAKU,kBAEhChH,EAAAA,EAAAA,KAAA,SAAOE,UAAU,uBAAsBW,SAAEyF,EAAKW,mBAIhD,E,iCCgCV,MA7FmB9D,IAUK,IAVJ,aAClB+D,EAAY,mBACZC,EAAkB,cAClBC,EAAa,aACb1D,EAAY,eACZ2D,EAAc,iBACdC,EAAgB,SAChB3D,EAAQ,OACRG,EAAM,QACNF,GACgBT,EAChB,OACEvC,EAAAA,EAAAA,MAAC2G,EAAAA,EAAK,CAACC,KAAMN,EAAcO,OAAQN,EAAoBO,KAAK,KAAKC,UAAQ,EAAA9G,SAAA,EACvEb,EAAAA,EAAAA,KAACuH,EAAAA,EAAAA,OAAY,CAACK,aAAW,EAAA/G,UACvBb,EAAAA,EAAAA,KAAA,MAAIE,UAAU,cAAaW,SAAC,uBAE9Bb,EAAAA,EAAAA,KAACuH,EAAAA,EAAAA,KAAU,CAAA1G,UACTD,EAAAA,EAAAA,MAAA,QAAM0C,SAAUI,EAAa0D,GAAgBlH,UAAU,OAAMW,SAAA,EAC3Db,EAAAA,EAAAA,KAAC6H,EAAAA,EAAS,CACR1D,KAAK,QACLlB,MAAM,QACNsB,YAAY,cACZtE,KAAK,OACL2F,eAAe,OACfjC,SAAUA,EAEVG,OAAQA,EACRF,QAASA,GAFL,UAKN5D,EAAAA,EAAAA,KAAC6H,EAAAA,EAAS,CACR1D,KAAK,cACLlB,MAAM,cACNhD,KAAK,WACL2F,eAAe,OACfnB,KAAK,IACLd,SAAUA,EAEVG,OAAQA,EACRF,QAASA,GAFL,gBAKNhD,EAAAA,EAAAA,MAAC0B,EAAAA,EAAG,CAAAzB,SAAA,EACFb,EAAAA,EAAAA,KAACuC,EAAAA,EAAG,CAACuF,GAAI,EAAEjH,UACTD,EAAAA,EAAAA,MAACiH,EAAAA,EAAS,CACR1D,KAAK,WACLlB,MAAM,WACNhD,KAAK,SACL2F,eAAe,OACfjC,SAAUA,EAEVG,OAAQA,EACRF,QAASA,EACTmE,aAAa,OAAMlH,SAAA,EAEnBb,EAAAA,EAAAA,KAAA,UAAQM,MAAM,MAAKO,SAAC,SACpBb,EAAAA,EAAAA,KAAA,UAAQM,MAAM,SAAQO,SAAC,YACvBb,EAAAA,EAAAA,KAAA,UAAQM,MAAM,OAAMO,SAAC,WAPjB,eAURb,EAAAA,EAAAA,KAACuC,EAAAA,EAAG,CAACuF,GAAI,EAAEjH,UACTD,EAAAA,EAAAA,MAAA,OAAKV,UAAU,aAAYW,SAAA,EACzBb,EAAAA,EAAAA,KAAA,SAAOE,UAAU,aAAYW,SAAC,aAAgB,KAACb,EAAAA,EAAAA,KAAA,UAC/CA,EAAAA,EAAAA,KAACgI,EAAAA,EAAgB,CACfhH,WAAS,EACTe,WAAW,aACXzB,MAAO+G,EAAeJ,QACtB1G,SAAWiB,IACT8F,EAAiB9F,EAAK,aAOhCZ,EAAAA,EAAAA,MAAA,OAAKV,UAAU,WAAUW,SAAA,EACvBb,EAAAA,EAAAA,KAACqG,EAAAA,EAAM,CACL4B,QAAQ,QACR/H,UAAU,OACVG,QAAS8G,EAAmBtG,SAC7B,YAGDb,EAAAA,EAAAA,KAACqG,EAAAA,EAAM,CAAC4B,QAAQ,UAAUhI,KAAK,SAAQY,SAAC,qBAMxC,E,gECxFZ,MAAMqH,EAAqB,CACzB,CACEpD,GAAI,EACJtC,MAAO,wBACP2F,OAAQ,UACRzB,SAAU,OACVE,WAAYwB,EACZtB,cAAe,GACfE,cAAe,GACfD,iBAAkB,EAClBE,QAAS,gBAEX,CACEnC,GAAI,EACJtC,MAAO,yBACP2F,OAAQ,aACRzB,SAAU,MACVE,WAAYyB,EACZvB,cAAe,GACfE,cAAe,EACfD,iBAAkB,EAClBE,QAAS,gBAEX,CACEnC,GAAI,EACJtC,MAAO,mCACP2F,OAAQ,SACRzB,SAAU,MACVE,WAAY0B,EACZxB,cAAe,GACfE,cAAe,EACfD,iBAAkB,EAClBE,QAAS,gBAEX,CACEnC,GAAI,EACJtC,MAAO,+BACP2F,OAAQ,OACRzB,SAAU,OACVE,WAAY2B,EACZzB,cAAe,GACfE,cAAe,EACfD,iBAAkB,EAClBE,QAAS,gBAEX,CACEnC,GAAI,EACJtC,MAAO,kCACP2F,OAAQ,UACRzB,SAAU,MACVE,WAAY4B,EACZ1B,cAAe,EACfE,cAAe,EACfD,iBAAkB,EAClBE,QAAS,gBAEX,CACEnC,GAAI,EACJtC,MAAO,mCACP2F,OAAQ,UACRzB,SAAU,SACVE,WAAY6B,EACZ3B,cAAe,GACfE,cAAe,EACfD,iBAAkB,EAClBE,QAAS,gBAEX,CACEnC,GAAI,EACJtC,MAAO,mCACP2F,OAAQ,SACRzB,SAAU,SACVE,WAAY2B,EACZzB,cAAe,GACfE,cAAe,EACfD,iBAAkB,EAClBE,QAAS,gBAEX,CACEnC,GAAI,EACJtC,MAAO,uBACP2F,OAAQ,aACRzB,SAAU,OACVE,W,SACAE,cAAe,GACfE,cAAe,EACfD,iBAAkB,EAClBE,QAAS,iB,eCuUb,MAlZeyB,KACb,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAoB,CAC5CC,UAAWZ,EAAMa,QAAQC,GAAmB,YAAbA,EAAEb,SACjCc,gBAAiBf,EAAMa,QAAQC,GAAmB,eAAbA,EAAEb,SACvCe,YAAahB,EAAMa,QAAQC,GAAmB,WAAbA,EAAEb,SACnCgB,UAAWjB,EAAMa,QAAQC,GAAmB,SAAbA,EAAEb,YAE5BiB,EAAYC,IAAiBR,EAAAA,EAAAA,UAAiBX,EAAMoB,SACpDpC,EAAcqC,IAAmBV,EAAAA,EAAAA,WAAkB,IACnDxB,EAAgBmC,IAAqBX,EAAAA,EAAAA,UAAc,MAKpDY,GAAiBC,EAAAA,EAAAA,GACrBC,EAAAA,KAAaC,MAAM,CACjBpH,MAAOmH,EAAAA,KAAaE,WACpBnD,SAAUiD,EAAAA,KAAaE,cAOrBrG,GAAUC,EAAAA,EAAAA,IAAQ,CAAEJ,SAAUoG,KAC9B,aACJ/F,EAAY,SACZC,EAAQ,QACRC,EAAO,MACPkG,EACAjG,WAAW,OAAEC,IACXN,EAcEsC,EAAUA,CAACqC,EAAgB4B,KAC/BP,EAAkB,CAChBvC,QAAS,IAAI+C,KACbpD,WAAY,CAACqD,GACb9B,OAAQA,EACR4B,MAAOA,IAETR,GAAgB,EAAK,EA6CjBW,EAAWpF,IACf,MAAMqF,EAAqB,IAAKxB,GAEhC,OADwBwB,EAAcrF,IAAOqF,EAAcrF,EAC1C,EAmEnB,OACElE,EAAAA,EAAAA,MAACwD,EAAAA,SAAc,CAAAvD,SAAA,EACbb,EAAAA,EAAAA,KAACoK,EAAAA,EAAS,CACRxH,gBAAiB,CACf,CAAEK,MAAO,QAASC,KAAM,qBACxB,CAAED,MAAO,eAAgBC,KAAM,oBAAqBF,QAAQ,IAE9DR,MAAO,kBAGTxC,EAAAA,EAAAA,KAACqK,EAAW,CAACvE,QAASA,KAEtB9F,EAAAA,EAAAA,KAACsC,EAAAA,EAAG,CAAAzB,UACFb,EAAAA,EAAAA,KAACuC,EAAAA,EAAG,CAACwD,GAAI,GAAGlF,UACVb,EAAAA,EAAAA,KAACsK,EAAAA,GAAe,CAACC,UA3ENC,IACjB,MAAM,OAAEC,EAAM,YAAEC,GAAgBF,EAGhC,GAAKE,EAGL,GAAID,EAAOE,cAAgBD,EAAYC,YAAa,CAClD,MAAMC,EAhDMC,EAACC,EAAaC,EAAoBC,KAChD,MAAMR,EAASxG,MAAMiH,KAAKH,IACnBI,GAAWV,EAAOW,OAAOJ,EAAY,GAG5C,OAFAP,EAAOW,OAAOH,EAAU,EAAGE,GAEpBV,CAAM,EA2CGK,CACZX,EAAQO,EAAOE,aACfF,EAAO1H,MACP2H,EAAY3H,OAEd,IAAIqI,EAAkB,IAAKzC,GAC3ByC,EAAWX,EAAOE,aAAeC,EACjChC,EAASwC,EACX,KAAO,CACL,MAAMZ,EA9CGa,EACXZ,EACAC,EACAY,EACAC,KAEA,MAAMC,EAAcxH,MAAMiH,KAAKR,GACzBgB,EAAYzH,MAAMiH,KAAKP,IACtBQ,GAAWM,EAAYL,OAAOG,EAAgBvI,MAAO,GAC5D0I,EAAUN,OAAOI,EAAqBxI,MAAO,EAAGmI,GAChD,MAAMV,EAAc,CAAC,EAIrB,OAHAA,EAAOc,EAAgBX,aAAea,EACtChB,EAAOe,EAAqBZ,aAAec,EAEpCjB,CAAM,EAgCIa,CACbnB,EAAQO,EAAOE,aACfT,EAAQQ,EAAYC,aACpBF,EACAC,GAEIU,EAAa,IAAKzC,KAAU6B,GAClC5B,EAASwC,EACX,GAkD4CvK,UACpCD,EAAAA,EAAAA,MAAA,OAAKV,UAAU,QAAOW,SAAA,EAEpBb,EAAAA,EAAAA,KAAC0L,EAAAA,GAAS,CAACf,YAAY,YAAW9J,SAC/BA,CAAC8K,EAAUC,KACVhL,EAAAA,EAAAA,MAAA,OAAKV,UAAU,eAAeH,IAAK4L,EAASE,SAAShL,SAAA,EACnDb,EAAAA,EAAAA,KAAC8L,EAAAA,EAAc,CAEbC,UAAU,SACVC,SAAShM,EAAAA,EAAAA,KAACiM,EAAAA,EAAO,CAAApL,SAAC,sBAA4BA,UAE9Cb,EAAAA,EAAAA,KAAA,UACEE,UAAU,kEACV4E,GAAG,aACHzE,QAASA,IAAMyF,EAAQ,UAAW,aAAajF,UAE/Cb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gBATX,WAYNU,EAAAA,EAAAA,MAAA,MAAIV,UAAU,gCAA+BW,SAAA,CAAC,OACvC,KACLD,EAAAA,EAAAA,MAAA,QAAMV,UAAU,QAAOW,SAAA,CAAC,IAAE8H,EAAMG,UAAUQ,OAAO,UAGvB,IAA3BX,EAAMG,UAAUQ,SACftJ,EAAAA,EAAAA,KAAA,KAAGE,UAAU,mCAAkCW,SAAC,aAKjD8H,EAAMG,UAAUjG,KAAI,CAACC,EAAMC,KAC1B/C,EAAAA,EAAAA,KAACkM,EAAAA,GAAS,CAERC,YAAarJ,EAAKgC,GAAK,GACvB/B,MAAOA,EAAMlC,SAEZA,CAAC8K,EAAUC,KACV5L,EAAAA,EAAAA,KAAA,OACED,IAAK4L,EAASE,YACVF,EAASS,kBACTT,EAASU,gBAAexL,UAE5Bb,EAAAA,EAAAA,KAACsM,EAAQ,CAAChG,KAAMxD,OAVfA,EAAKgC,MAeb6G,EAASpH,kBAMhBvE,EAAAA,EAAAA,KAAC0L,EAAAA,GAAS,CAACf,YAAY,kBAAiB9J,SACrCA,CAAC8K,EAAUC,KACVhL,EAAAA,EAAAA,MAAA,OAAKb,IAAK4L,EAASE,SAAU3L,UAAU,eAAcW,SAAA,EACnDb,EAAAA,EAAAA,KAAC8L,EAAAA,EAAc,CAEbC,UAAU,SACVC,SAAShM,EAAAA,EAAAA,KAACiM,EAAAA,EAAO,CAAApL,SAAC,6BAAmCA,UAErDb,EAAAA,EAAAA,KAAA,UACEE,UAAU,kEACV4E,GAAG,oBACHzE,QAASA,IAAMyF,EAAQ,aAAc,mBAAmBjF,UAExDb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gBATX,WAYNU,EAAAA,EAAAA,MAAA,MAAIV,UAAU,gCAA+BW,SAAA,CAAC,cAChC,KACZD,EAAAA,EAAAA,MAAA,QAAMV,UAAU,QAAOW,SAAA,CAAC,IACpB8H,EAAMM,gBAAgBK,OAAO,UAGD,IAAjCX,EAAMM,gBAAgBK,SACrBtJ,EAAAA,EAAAA,KAAA,KAAGE,UAAU,mCAAkCW,SAAC,aAKjD8H,EAAMM,gBAAgBpG,KAAI,CAACC,EAAMC,KAChC/C,EAAAA,EAAAA,KAACkM,EAAAA,GAAS,CAERC,YAAarJ,EAAKgC,GAAK,GACvB/B,MAAOA,EAAMlC,SAEZA,CAAC8K,EAAUC,KACV5L,EAAAA,EAAAA,KAAA,OACED,IAAK4L,EAASE,YACVF,EAASS,kBACTT,EAASU,gBAAexL,UAE5Bb,EAAAA,EAAAA,KAACsM,EAAQ,CAAChG,KAAMxD,OAVfA,EAAKgC,MAeb6G,EAASpH,kBAMhBvE,EAAAA,EAAAA,KAAC0L,EAAAA,GAAS,CAACf,YAAY,cAAa9J,SACjCA,CAAC8K,EAAUC,KACVhL,EAAAA,EAAAA,MAAA,OAAKb,IAAK4L,EAASE,SAAU3L,UAAU,QAAOW,SAAA,EAC5Cb,EAAAA,EAAAA,KAAC8L,EAAAA,EAAc,CAEbC,UAAU,SACVC,SAAShM,EAAAA,EAAAA,KAACiM,EAAAA,EAAO,CAAApL,SAAC,wBAA8BA,UAEhDb,EAAAA,EAAAA,KAAA,UACEE,UAAU,kEACV4E,GAAG,gBACHzE,QAASA,IAAMyF,EAAQ,SAAU,eAAejF,UAEhDb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gBATX,WAYNU,EAAAA,EAAAA,MAAA,MAAIV,UAAU,gCAA+BW,SAAA,CAAC,WACnC8H,EAAMO,YAAYI,OAAO,OAEN,IAA7BX,EAAMO,YAAYI,SACjBtJ,EAAAA,EAAAA,KAAA,KAAGE,UAAU,mCAAkCW,SAAC,aAKjD8H,EAAMO,YAAYrG,KAAI,CAACC,EAAMC,KAC5B/C,EAAAA,EAAAA,KAACkM,EAAAA,GAAS,CAERC,YAAarJ,EAAKgC,GAAK,GACvB/B,MAAOA,EAAMlC,SAEZA,CAAC8K,EAAUC,KACV5L,EAAAA,EAAAA,KAAA,OACED,IAAK4L,EAASE,YACVF,EAASS,kBACTT,EAASU,gBAAexL,UAE5Bb,EAAAA,EAAAA,KAACsM,EAAQ,CAAChG,KAAMxD,OAVfA,EAAKgC,MAeb6G,EAASpH,kBAMhBvE,EAAAA,EAAAA,KAAC0L,EAAAA,GAAS,CAACf,YAAY,YAAW9J,SAC/BA,CAAC8K,EAAUC,KACVhL,EAAAA,EAAAA,MAAA,OAAKb,IAAK4L,EAASE,SAAU3L,UAAU,QAAOW,SAAA,EAC5Cb,EAAAA,EAAAA,KAAC8L,EAAAA,EAAc,CAEbC,UAAU,SACVC,SAAShM,EAAAA,EAAAA,KAACiM,EAAAA,EAAO,CAAApL,SAAC,sBAA4BA,UAE9Cb,EAAAA,EAAAA,KAAA,UACEE,UAAU,kEACV4E,GAAG,aACHzE,QAASA,IAAMyF,EAAQ,OAAQ,aAAajF,UAE5Cb,EAAAA,EAAAA,KAAA,KAAGE,UAAU,gBATX,WAYNU,EAAAA,EAAAA,MAAA,MAAIV,UAAU,gCAA+BW,SAAA,CAAC,SACrC8H,EAAMQ,UAAUG,OAAO,OAEJ,IAA3BX,EAAMQ,UAAUG,SACftJ,EAAAA,EAAAA,KAAA,KAAGE,UAAU,mCAAkCW,SAAC,aAKjD8H,EAAMQ,UAAUtG,KAAI,CAACC,EAAMC,KAC1B/C,EAAAA,EAAAA,KAACkM,EAAAA,GAAS,CAERC,YAAarJ,EAAKgC,GAAK,GACvB/B,MAAOA,EAAMlC,SAEZA,CAAC8K,EAAUC,KACV5L,EAAAA,EAAAA,KAAA,OACED,IAAK4L,EAASE,YACVF,EAASS,kBACTT,EAASU,gBAAexL,UAE5Bb,EAAAA,EAAAA,KAACsM,EAAQ,CAAChG,KAAMxD,OAVfA,EAAKgC,MAeb6G,EAASpH,0BAUvB2C,IACClH,EAAAA,EAAAA,KAACuM,EAAU,CACTrF,aAAcA,EACdC,mBAhWmBA,KACzBoC,GAAiBiD,IAAeA,GAAU,EAgWpCpF,cA5PeqF,IACrB,MAAMC,EAAW,CACflK,MAAOiK,EAAc,MACrB/F,SAAU+F,EAAiB,UAGvB3G,EAAU,IACXuB,KACAqF,EACH5H,GAAIsE,EAAa,EACjBnC,QAASI,EAAeJ,QAAQ0F,mBAAmB,QAAS,CAC1DC,KAAM,UACNC,MAAO,QACPC,IAAK,YAEPhG,cAAe,GACfE,cAAe,GACfD,iBAAkB,GAGpB,IAAIoD,EAAqB,IAAKxB,GAC1BT,EAAQ,IAAIgC,EAAQ7C,EAAe0C,OAAQjE,GAC/CqE,EAAc9C,EAAe0C,OAAS,IAAI7B,GAE1CU,EAASuB,GACTZ,GAAgB,GAChBF,EAAcD,EAAa,GAC3BU,GAAO,EAkODpG,aAAcA,EACd2D,eAAgBA,EAChBC,iBA7UkB9F,IACpB6F,GACFmC,EAAkB,IAAKnC,EAAgBJ,QAASzF,GAClD,EA2UMmC,SAAUA,EACVG,OAAQA,EACRF,QAASA,MAGE,C","sources":["components/Datepicker.tsx","components/PageTitle.tsx","components/VerticalForm.tsx","components/FormInput.tsx","pages/apps/Tasks/Board/TaskDetails.tsx","pages/apps/Tasks/Board/Task.tsx","pages/apps/Tasks/Board/AddNewTask.tsx","pages/apps/Tasks/Board/data.tsx","pages/apps/Tasks/Board/index.tsx"],"sourcesContent":["import React, { forwardRef } from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport classNames from \"classnames\";\n\ninterface DatepickerInputProps {\n  onClick?: () => void;\n  value?: string;\n  inputClass: string;\n  children?: React.ReactNode;\n}\n\n/* Datepicker with Input */\nconst DatepickerInput = forwardRef<HTMLInputElement, DatepickerInputProps>(\n  (props, ref) => {\n    const onDateValueChange = () => {\n      console.log(\"date value changed\");\n    };\n    return (\n      <input\n        type=\"text\"\n        className={classNames(\"form-control\", props.inputClass)}\n        onClick={props.onClick}\n        value={props.value}\n        onChange={onDateValueChange}\n        ref={ref}\n      />\n    );\n  }\n);\n\n/* Datepicker with Addon Input */\nconst DatepickerInputWithAddon = forwardRef<\n  HTMLInputElement,\n  DatepickerInputProps\n>((props, ref) => (\n  <div className=\"input-group input-group-sm\" ref={ref}>\n    <input\n      type=\"text\"\n      className={classNames(\"form-control\", props.inputClass)}\n      onClick={props.onClick}\n      value={props.value}\n      readOnly\n    />\n    <span className=\"input-group-text bg-blue border-blue text-white\">\n      <i className=\"mdi mdi-calendar-range\"></i>\n    </span>\n  </div>\n));\n\ninterface ShreyuDatepickerProps {\n  value?: Date;\n  selectsRange?: boolean;\n  startDate?: Date;\n  endDate?: Date;\n  calendarClassName?: string;\n  onChange: (date: any) => void;\n  hideAddon?: boolean;\n  inputClass?: string;\n  dateFormat?: string;\n  minDate?: Date;\n  maxDate?: Date;\n  showTimeSelect?: boolean;\n  tI?: number;\n  timeCaption?: string;\n  timeFormat?: string;\n  showTimeSelectOnly?: boolean;\n  monthsShown?: number;\n  inline?: boolean;\n}\n\nconst ShreyuDatepicker = (props: ShreyuDatepickerProps) => {\n  // handle custom input\n  const input =\n    (props.hideAddon || false) === true ? (\n      <DatepickerInput inputClass={props.inputClass!} />\n    ) : (\n      <DatepickerInputWithAddon inputClass={props.inputClass!} />\n    );\n\n  return (\n    <>\n      {/* date picker control */}\n      <DatePicker\n        calendarClassName={props.calendarClassName || \"shadow\"}\n        selectsRange={props.selectsRange}\n        startDate={props.startDate}\n        endDate={props.endDate}\n        selected={props.value}\n        onChange={(date) => props.onChange(date)}\n        customInput={input}\n        timeIntervals={props.tI}\n        showTimeSelect={props.showTimeSelect}\n        timeFormat={props.timeFormat || \"hh:mm a\"}\n        timeCaption={props.timeCaption}\n        dateFormat={props.dateFormat || \"MM/dd/yyyy\"}\n        minDate={props.minDate}\n        maxDate={props.maxDate}\n        monthsShown={props.monthsShown}\n        showTimeSelectOnly={props.showTimeSelectOnly}\n        inline={props.inline}\n        autoComplete=\"off\"\n      />\n    </>\n  );\n};\n\nexport default ShreyuDatepicker;\n","import React from \"react\";\nimport { Row, Col, Breadcrumb } from \"react-bootstrap\";\n\ninterface BreadcrumbItems {\n  label: string;\n  path: string;\n  active?: boolean;\n}\n\ninterface PageTitleProps {\n  breadCrumbItems: Array<BreadcrumbItems>;\n  title: string;\n}\n\n/**\n * PageTitle\n */\nconst PageTitle = (props: PageTitleProps) => {\n  return (\n    <Row>\n      <Col>\n        <div className=\"page-title-box\">\n          <h4 className=\"page-title\">{props.title}</h4>\n          <div className=\"page-title-right\">\n            <Breadcrumb listProps={{ className: \"m-0\" }}>\n              <Breadcrumb.Item href=\"/\">Shreyu</Breadcrumb.Item>\n\n              {(props.breadCrumbItems || []).map((item, index) => {\n                return item.active ? (\n                  <Breadcrumb.Item active key={index}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                ) : (\n                  <Breadcrumb.Item key={index} href={item.path}>\n                    {item.label}\n                  </Breadcrumb.Item>\n                );\n              })}\n            </Breadcrumb>\n          </div>\n        </div>\n      </Col>\n    </Row>\n  );\n};\n\nexport default PageTitle;\n","import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  startIcon?: any;\n  label?: string;\n  type?: string;\n  name: string;\n  comp?: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  textClassName?: string;\n  refCallback?: any;\n  action?: any;\n  rows?: string | number;\n}\n\n// textual form-controls—like inputs, passwords, textareas etc.\nconst TextualInput = ({\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Control\n        type={type}\n        placeholder={placeholder}\n        name={name}\n        as={comp}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        rows={rows}\n        {...otherProps}\n      ></Form.Control>\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n  type,\n  label,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Check\n        type={type}\n        label={label}\n        name={name}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        {...otherProps}\n      />\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// handle select controls\nconst SelectInput = ({\n  type,\n  label,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Select\n        type={type}\n        label={label}\n        name={name}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        {...otherProps}\n      />\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n  startIcon,\n  type,\n  name,\n  placeholder,\n  comp,\n  register,\n  errors,\n  rows,\n  className,\n  textClassName,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <InputGroup>\n      <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n      {type === \"select\" ? (\n        <SelectInput\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          refCallback={refCallback}\n          comp={comp}\n          errors={errors}\n          register={register}\n          className={className}\n          rows={rows}\n          {...otherProps}\n        />\n      ) : (\n        <TextualInput\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          refCallback={refCallback}\n          comp={comp}\n          errors={errors}\n          register={register}\n          className={className}\n          rows={rows}\n          {...otherProps}\n        />\n      )}\n    </InputGroup>\n  );\n};\n\nconst FormInput = ({\n  startIcon,\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  textClassName,\n  refCallback,\n  action,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"checkbox\" || type === \"radio\" ? (\n            <Form.Group className={containerClass}>\n              <CheckInput\n                type={type}\n                label={label}\n                name={name}\n                placeholder={placeholder}\n                refCallback={refCallback}\n                errors={errors}\n                register={register}\n                comp={comp}\n                className={className}\n                rows={rows}\n                {...otherProps}\n              />\n            </Form.Group>\n          ) : type === \"select\" ? (\n            <Form.Group className={containerClass}>\n              {label ? (\n                <>\n                  <Form.Label className={labelClassName}>{label}</Form.Label>\n                  {action && action}\n                </>\n              ) : null}\n              {startIcon ? (\n                <FormInputGroup\n                  type={type}\n                  startIcon={startIcon}\n                  name={name}\n                  comp={comp}\n                  textClassName={textClassName}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              ) : (\n                <SelectInput\n                  type={type}\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  comp={comp}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              )}\n            </Form.Group>\n          ) : (\n            <Form.Group className={containerClass}>\n              {label ? (\n                <>\n                  <Form.Label className={labelClassName}>{label}</Form.Label>\n                  {action && action}\n                </>\n              ) : null}\n              {startIcon ? (\n                <FormInputGroup\n                  type={type}\n                  startIcon={startIcon}\n                  name={name}\n                  comp={comp}\n                  textClassName={textClassName}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              ) : (\n                <TextualInput\n                  type={type}\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  comp={comp}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              )}\n            </Form.Group>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import React from \"react\";\nimport { Card, Col, Dropdown, Row, Button } from \"react-bootstrap\";\nimport FeatherIcons from \"feather-icons-react\";\n\ninterface TaskDetailsProps {\n  newTask: (status: string, queue: string) => void;\n}\n\nconst TaskDetails = ({ newTask }: TaskDetailsProps) => {\n  return (\n    <Row>\n      <Col xs={12}>\n        <Card>\n          <Card.Body>\n            <Row className=\"align-items-center\">\n              <Col sm={\"auto\"}>\n                <label className=\"fw-bold d-inline-flex me-2\">\n                  <FeatherIcons\n                    icon=\"hard-drive\"\n                    className=\"icon-dual icon-xs me-2\"\n                  />\n                  Project :\n                </label>\n\n                <Dropdown className=\"d-inline-flex\">\n                  <Dropdown.Toggle\n                    as=\"a\"\n                    href=\"#\"\n                    className=\"cursor-pointer fw-bold\"\n                  >\n                    Shreyu Design\n                    <i className=\"uil uil-angle-down fs-16 align-middle\"></i>\n                  </Dropdown.Toggle>\n                  <Dropdown.Menu>\n                    <Dropdown.Item>\n                      <FeatherIcons\n                        className=\"icon-dual icon-xs me-2\"\n                        icon=\"hard-drive\"\n                      ></FeatherIcons>\n                      Shreyu Design\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                      <FeatherIcons\n                        className=\"icon-dual icon-xs me-2\"\n                        icon=\"briefcase\"\n                      ></FeatherIcons>\n                      Development\n                    </Dropdown.Item>\n                    <Dropdown.Divider />\n                    <Dropdown.Item>\n                      <FeatherIcons\n                        className=\"icon-dual icon-xs me-2\"\n                        icon=\"folder-plus\"\n                      ></FeatherIcons>\n                      Shreyu Angular\n                    </Dropdown.Item>\n                    <Dropdown.Item>\n                      <FeatherIcons\n                        className=\"icon-dual icon-xs me-2\"\n                        icon=\"folder-plus\"\n                      ></FeatherIcons>\n                      Shreyu React\n                    </Dropdown.Item>\n                  </Dropdown.Menu>\n                </Dropdown>\n              </Col>\n              <Col className=\"text-sm-end mt-sm-0 mt-2\">\n                <Button onClick={() => newTask(\"Pending\", \"todoTasks\")}>\n                  <i className=\"uil-plus me-1\"></i>Add New\n                </Button>\n              </Col>\n            </Row>\n          </Card.Body>\n        </Card>\n      </Col>\n    </Row>\n  );\n};\n\nexport default TaskDetails;\n","import React from \"react\";\nimport { Card, Dropdown } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport classNames from \"classnames\";\n\n// dummy data\nimport { TaskTypes } from \"./data\";\n\ninterface TaskItemProps {\n  task: TaskTypes;\n}\n\n// task item\nconst TaskItem = (props: TaskItemProps) => {\n  const task = props.task || {};\n\n  return (\n    <div className=\"task-list-items\">\n      <Card className=\"border mb-0\">\n        <Card.Body className=\"p-3\">\n          <Dropdown className=\"float-end\" align=\"end\">\n            <Dropdown.Toggle\n              as=\"a\"\n              className=\"cursor-pointer text-muted arrow-none\"\n            >\n              <i className=\"uil uil-ellipsis-v fs-14\"></i>\n            </Dropdown.Toggle>\n\n            <Dropdown.Menu>\n              <Dropdown.Item>\n                <i className=\"uil uil-edit-alt me-2\"></i>Edit\n              </Dropdown.Item>\n              <Dropdown.Item>\n                <i className=\"uil uil-user-plus me-2\"></i>Add People\n              </Dropdown.Item>\n              <Dropdown.Item className=\"text-warning\">\n                <i className=\"uil uil-exit me-2\"></i>Leave\n              </Dropdown.Item>\n              <Dropdown.Divider />\n              <Dropdown.Item className=\"text-danger\">\n                <i className=\"uil uil-trash me-2\"></i>Delete\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n\n          <h6 className=\"mt-0 mb-2 fs-15\">\n            <Link to=\"#\" className=\"text-body\">\n              {task.title}\n            </Link>\n          </h6>\n\n          <span\n            className={classNames(\"badge\", {\n              \"badge-soft-danger\": task.priority === \"High\",\n              \"badge-soft-warning\": task.priority === \"Medium\",\n              \"badge-soft-success\": task.priority === \"Low\",\n            })}\n          >\n            {task.priority}\n          </span>\n\n          <p className=\"mb-0 mt-4\">\n            <img\n              src={task.userAvatar}\n              alt=\"\"\n              className=\"avatar-xs rounded-circle me-2\"\n            />\n\n            <span className=\"text-nowrap align-middle fs-13 me-2\">\n              <i className=\"uil uil-comments-alt text-muted me-1\"></i>\n              {task.totalComments}\n            </span>\n\n            <span className=\"text-nowrap align-middle fs-13\">\n              <i className=\"uil uil-check-square me-1 text-muted\"></i>\n              {task.subTaskCompleted}/{task.totalSubTasks}\n            </span>\n            <small className=\"float-end text-muted\">{task.dueDate}</small>\n          </p>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default TaskItem;\n","import React from \"react\";\nimport { Modal, Button, Row, Col } from \"react-bootstrap\";\nimport { UseFormHandleSubmit, FieldErrors, Control } from \"react-hook-form\";\n\n// components\nimport ShreyuDatepicker from \"../../../../components/Datepicker\";\nimport { FormInput } from \"../../../../components/\";\n\ninterface AddNewTaskProps {\n  newTaskModal: boolean;\n  toggleNewTaskModal: () => void;\n  handleNewTask: (values: any) => void;\n  handleSubmit: UseFormHandleSubmit<any>;\n  newTaskDetails: any;\n  handleDateChange: (date: Date) => void;\n  errors: FieldErrors;\n  control?: Control<any>;\n  register?: any;\n}\n\nconst AddNewTask = ({\n  newTaskModal,\n  toggleNewTaskModal,\n  handleNewTask,\n  handleSubmit,\n  newTaskDetails,\n  handleDateChange,\n  register,\n  errors,\n  control,\n}: AddNewTaskProps) => {\n  return (\n    <Modal show={newTaskModal} onHide={toggleNewTaskModal} size=\"lg\" centered>\n      <Modal.Header closeButton>\n        <h4 className=\"modal-title\">Create New Task</h4>\n      </Modal.Header>\n      <Modal.Body>\n        <form onSubmit={handleSubmit(handleNewTask)} className=\"px-2\">\n          <FormInput\n            name=\"title\"\n            label=\"Title\"\n            placeholder=\"Enter title\"\n            type=\"text\"\n            containerClass=\"mb-3\"\n            register={register}\n            key=\"title\"\n            errors={errors}\n            control={control}\n          />\n\n          <FormInput\n            name=\"description\"\n            label=\"Description\"\n            type=\"textarea\"\n            containerClass=\"mb-3\"\n            rows=\"3\"\n            register={register}\n            key=\"description\"\n            errors={errors}\n            control={control}\n          />\n\n          <Row>\n            <Col md={6}>\n              <FormInput\n                name=\"priority\"\n                label=\"Priority\"\n                type=\"select\"\n                containerClass=\"mb-3\"\n                register={register}\n                key=\"priority\"\n                errors={errors}\n                control={control}\n                defaultValue=\"High\"\n              >\n                <option value=\"Low\">Low</option>\n                <option value=\"Medium\">Medium</option>\n                <option value=\"High\">High</option>\n              </FormInput>\n            </Col>\n            <Col md={6}>\n              <div className=\"form-group\">\n                <label className=\"form-label\">Due Date</label> <br />\n                <ShreyuDatepicker\n                  hideAddon\n                  dateFormat=\"yyyy-MM-dd\"\n                  value={newTaskDetails.dueDate}\n                  onChange={(date) => {\n                    handleDateChange(date);\n                  }}\n                />\n              </div>\n            </Col>\n          </Row>\n\n          <div className=\"text-end\">\n            <Button\n              variant=\"light\"\n              className=\"me-1\"\n              onClick={toggleNewTaskModal}\n            >\n              Cancel\n            </Button>\n            <Button variant=\"primary\" type=\"submit\">\n              Create\n            </Button>\n          </div>\n        </form>\n      </Modal.Body>\n    </Modal>\n  );\n};\n\nexport default AddNewTask;\n","// images\nimport avatar2 from \"../../../../assets/images/users/avatar-2.jpg\";\nimport avatar3 from \"../../../../assets/images/users/avatar-3.jpg\";\nimport avatar4 from \"../../../../assets/images/users/avatar-4.jpg\";\nimport avatar5 from \"../../../../assets/images/users/avatar-5.jpg\";\nimport avatar6 from \"../../../../assets/images/users/avatar-6.jpg\";\nimport avatar7 from \"../../../../assets/images/users/avatar-7.jpg\";\nimport avatar8 from \"../../../../assets/images/users/avatar-8.jpg\";\n\nexport interface TaskTypes {\n  id: number;\n  title: string;\n  status: string;\n  priority: string;\n  userAvatar: string;\n  totalComments: number;\n  totalSubTasks: number;\n  subTaskCompleted: number;\n  dueDate: string;\n}\n\nconst tasks: TaskTypes[] = [\n  {\n    id: 1,\n    title: \"Ubold v3.0 - Redesign\",\n    status: \"Pending\",\n    priority: \"High\",\n    userAvatar: avatar5,\n    totalComments: 28,\n    totalSubTasks: 10,\n    subTaskCompleted: 1,\n    dueDate: \"Jul 18, 2019\",\n  },\n  {\n    id: 2,\n    title: \"Minton v3.0 - Redesign\",\n    status: \"Inprogress\",\n    priority: \"Low\",\n    userAvatar: avatar6,\n    totalComments: 21,\n    totalSubTasks: 7,\n    subTaskCompleted: 4,\n    dueDate: \"Jul 20, 2019\",\n  },\n  {\n    id: 3,\n    title: \"Shreyu v2.1 - Angular and Django\",\n    status: \"Review\",\n    priority: \"Low\",\n    userAvatar: avatar2,\n    totalComments: 24,\n    totalSubTasks: 2,\n    subTaskCompleted: 1,\n    dueDate: \"Jul 21, 2019\",\n  },\n  {\n    id: 4,\n    title: \"Shreyu v2.1 - React, Webpack\",\n    status: \"Done\",\n    priority: \"High\",\n    userAvatar: avatar7,\n    totalComments: 21,\n    totalSubTasks: 5,\n    subTaskCompleted: 5,\n    dueDate: \"Jul 22, 2019\",\n  },\n  {\n    id: 5,\n    title: \"Shreyu 2.2 - Vue.Js and Laravel\",\n    status: \"Pending\",\n    priority: \"Low\",\n    userAvatar: avatar3,\n    totalComments: 2,\n    totalSubTasks: 5,\n    subTaskCompleted: 2,\n    dueDate: \"Jul 18, 2019\",\n  },\n  {\n    id: 6,\n    title: \"Shreyu 2.3 - Rails, NodeJs, Mean\",\n    status: \"Pending\",\n    priority: \"Medium\",\n    userAvatar: avatar4,\n    totalComments: 24,\n    totalSubTasks: 8,\n    subTaskCompleted: 2,\n    dueDate: \"Jul 21, 2019\",\n  },\n  {\n    id: 7,\n    title: \"Shreyu - Landing page and UI Kit\",\n    status: \"Review\",\n    priority: \"Medium\",\n    userAvatar: avatar7,\n    totalComments: 11,\n    totalSubTasks: 6,\n    subTaskCompleted: 4,\n    dueDate: \"Jul 10, 2019\",\n  },\n  {\n    id: 8,\n    title: \"Shreyu 3.0 - Scoping\",\n    status: \"Inprogress\",\n    priority: \"High\",\n    userAvatar: avatar8,\n    totalComments: 10,\n    totalSubTasks: 4,\n    subTaskCompleted: 3,\n    dueDate: \"Jul 24, 2019\",\n  },\n];\n\nexport { tasks };\n","import React, { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { Row, Col, OverlayTrigger, Tooltip } from \"react-bootstrap\";\nimport {\n  DragDropContext,\n  Droppable,\n  Draggable,\n  DropResult,\n} from \"react-beautiful-dnd\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\n\n// components\nimport PageTitle from \"../../../../components/PageTitle\";\n\nimport TaskDetails from \"./TaskDetails\";\nimport TaskItem from \"./Task\";\nimport AddNewTask from \"./AddNewTask\";\n\n// dummy data\nimport { tasks, TaskTypes } from \"./data\";\n\n// images\nimport defaultAvatar from \"../../../../assets/images/users/avatar-1.jpg\";\n\ninterface StateType {\n  todoTasks: TaskTypes[];\n  inprogressTasks: TaskTypes[];\n  reviewTasks: TaskTypes[];\n  doneTasks: TaskTypes[];\n}\n\n// kanban\nconst Kanban = () => {\n  const [state, setState] = useState<StateType>({\n    todoTasks: tasks.filter((t) => t.status === \"Pending\"),\n    inprogressTasks: tasks.filter((t) => t.status === \"Inprogress\"),\n    reviewTasks: tasks.filter((t) => t.status === \"Review\"),\n    doneTasks: tasks.filter((t) => t.status === \"Done\"),\n  });\n  const [totalTasks, setTotalTasks] = useState<number>(tasks.length);\n  const [newTaskModal, setNewTaskModal] = useState<boolean>(false);\n  const [newTaskDetails, setNewTaskDetails] = useState<any>(null);\n\n  /*\n   * Form validation schema\n   */\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      title: yup.string().required(),\n      priority: yup.string().required(),\n    })\n  );\n\n  /*\n   * Form methods\n   */\n  const methods = useForm({ resolver: schemaResolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    reset,\n    formState: { errors },\n  } = methods;\n\n  /**\n   * Toggles the new task modal\n   */\n  const toggleNewTaskModal = () => {\n    setNewTaskModal((prevstate) => !prevstate);\n  };\n\n  /**\n   * Creates new empty task with given status\n   * @param status\n   * @param queue\n   */\n  const newTask = (status: string, queue: string) => {\n    setNewTaskDetails({\n      dueDate: new Date(),\n      userAvatar: [defaultAvatar],\n      status: status,\n      queue: queue,\n    });\n    setNewTaskModal(true);\n  };\n\n  /**\n   * When date changes\n   * @param {} date\n   */\n  const handleDateChange = (date: Date) => {\n    if (newTaskDetails) {\n      setNewTaskDetails({ ...newTaskDetails, dueDate: date });\n    }\n  };\n\n  // a little function to help us with reordering the result\n  const reorder = (list: any[], startIndex: number, endIndex: number) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  };\n\n  /**\n   * Moves an item from one list to another list.\n   */\n  const move = (\n    source: Iterable<unknown> | ArrayLike<unknown>,\n    destination: Iterable<unknown> | ArrayLike<unknown>,\n    droppableSource: { index: number; droppableId: string | number },\n    droppableDestination: { index: number; droppableId: string | number }\n  ) => {\n    const sourceClone = Array.from(source);\n    const destClone = Array.from(destination);\n    const [removed] = sourceClone.splice(droppableSource.index, 1);\n    destClone.splice(droppableDestination.index, 0, removed);\n    const result: any = {};\n    result[droppableSource.droppableId] = sourceClone;\n    result[droppableDestination.droppableId] = destClone;\n\n    return result;\n  };\n\n  /**\n   * Gets the list\n   */\n  const getList = (id: string) => {\n    const modifiedState: any = { ...state };\n    const stateTasks: any = modifiedState[id] && modifiedState[id];\n    return stateTasks;\n  };\n\n  /**\n   * On drag end\n   */\n  const onDragEnd = (result: DropResult) => {\n    const { source, destination } = result;\n\n    // dropped outside the list\n    if (!destination) {\n      return;\n    }\n    if (source.droppableId === destination.droppableId) {\n      const items = reorder(\n        getList(source.droppableId),\n        source.index,\n        destination.index\n      );\n      let localState: any = { ...state };\n      localState[source.droppableId] = items;\n      setState(localState);\n    } else {\n      const result = move(\n        getList(source.droppableId),\n        getList(destination.droppableId),\n        source,\n        destination\n      );\n      const localState = { ...state, ...result };\n      setState(localState);\n    }\n  };\n\n  /**\n   * Handles the new task form submission\n   */\n  const handleNewTask = (values: any) => {\n    const formData = {\n      title: values[\"title\"],\n      priority: values[\"priority\"],\n    };\n\n    const newTask = {\n      ...newTaskDetails,\n      ...formData,\n      id: totalTasks + 1,\n      dueDate: newTaskDetails.dueDate.toLocaleDateString(\"en-US\", {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n      }),\n      totalComments: 18,\n      totalSubTasks: 12,\n      subTaskCompleted: 2,\n    };\n\n    let modifiedState: any = { ...state };\n    let tasks = [...getList(newTaskDetails.queue), newTask];\n    modifiedState[newTaskDetails.queue] = [...tasks];\n\n    setState(modifiedState);\n    setNewTaskModal(false);\n    setTotalTasks(totalTasks + 1);\n    reset();\n  };\n\n  return (\n    <React.Fragment>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Tasks\", path: \"apps/tasks/kanban\" },\n          { label: \"Kanban Board\", path: \"apps/tasks/kanban\", active: true },\n        ]}\n        title={\"Kanban Board\"}\n      />\n\n      <TaskDetails newTask={newTask} />\n\n      <Row>\n        <Col xs={12}>\n          <DragDropContext onDragEnd={onDragEnd}>\n            <div className=\"board\">\n              {/* todo */}\n              <Droppable droppableId=\"todoTasks\">\n                {(provided, snapshot) => (\n                  <div className=\"tasks border\" ref={provided.innerRef}>\n                    <OverlayTrigger\n                      key=\"bottom\"\n                      placement=\"bottom\"\n                      overlay={<Tooltip>Add New Todo Task</Tooltip>}\n                    >\n                      <button\n                        className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                        id=\"addNewTodo\"\n                        onClick={() => newTask(\"Pending\", \"todoTasks\")}\n                      >\n                        <i className=\"uil-plus\"></i>\n                      </button>\n                    </OverlayTrigger>\n                    <h5 className=\"mt-0 task-header header-title\">\n                      TODO{\" \"}\n                      <span className=\"fs-13\">({state.todoTasks.length})</span>\n                    </h5>\n\n                    {state.todoTasks.length === 0 && (\n                      <p className=\"text-center text-muted pt-2 mb-0\">\n                        No Tasks\n                      </p>\n                    )}\n\n                    {state.todoTasks.map((item, index) => (\n                      <Draggable\n                        key={item.id}\n                        draggableId={item.id + \"\"}\n                        index={index}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <TaskItem task={item} />\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n\n              {/* in progress */}\n              <Droppable droppableId=\"inprogressTasks\">\n                {(provided, snapshot) => (\n                  <div ref={provided.innerRef} className=\"tasks border\">\n                    <OverlayTrigger\n                      key=\"bottom\"\n                      placement=\"bottom\"\n                      overlay={<Tooltip>Add New In Progress Task</Tooltip>}\n                    >\n                      <button\n                        className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                        id=\"addInprogressTask\"\n                        onClick={() => newTask(\"Inprogress\", \"inprogressTasks\")}\n                      >\n                        <i className=\"uil-plus\"></i>\n                      </button>\n                    </OverlayTrigger>\n                    <h5 className=\"mt-0 task-header header-title\">\n                      In Progress{\" \"}\n                      <span className=\"fs-13\">\n                        ({state.inprogressTasks.length})\n                      </span>\n                    </h5>\n                    {state.inprogressTasks.length === 0 && (\n                      <p className=\"text-center text-muted pt-2 mb-0\">\n                        No Tasks\n                      </p>\n                    )}\n\n                    {state.inprogressTasks.map((item, index) => (\n                      <Draggable\n                        key={item.id}\n                        draggableId={item.id + \"\"}\n                        index={index}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <TaskItem task={item} />\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n\n              {/* review */}\n              <Droppable droppableId=\"reviewTasks\">\n                {(provided, snapshot) => (\n                  <div ref={provided.innerRef} className=\"tasks\">\n                    <OverlayTrigger\n                      key=\"bottom\"\n                      placement=\"bottom\"\n                      overlay={<Tooltip>Add New Review Task</Tooltip>}\n                    >\n                      <button\n                        className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                        id=\"addReviewTask\"\n                        onClick={() => newTask(\"Review\", \"reviewTasks\")}\n                      >\n                        <i className=\"uil-plus\"></i>\n                      </button>\n                    </OverlayTrigger>\n                    <h5 className=\"mt-0 task-header header-title\">\n                      Review ({state.reviewTasks.length})\n                    </h5>\n                    {state.reviewTasks.length === 0 && (\n                      <p className=\"text-center text-muted pt-2 mb-0\">\n                        No Tasks\n                      </p>\n                    )}\n\n                    {state.reviewTasks.map((item, index) => (\n                      <Draggable\n                        key={item.id}\n                        draggableId={item.id + \"\"}\n                        index={index}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <TaskItem task={item} />\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n\n              {/* done */}\n              <Droppable droppableId=\"doneTasks\">\n                {(provided, snapshot) => (\n                  <div ref={provided.innerRef} className=\"tasks\">\n                    <OverlayTrigger\n                      key=\"bottom\"\n                      placement=\"bottom\"\n                      overlay={<Tooltip>Add New Done Task</Tooltip>}\n                    >\n                      <button\n                        className=\"btn btn-link p-0 text-secondary float-end shadow-none px-0 py-2\"\n                        id=\"addNewDone\"\n                        onClick={() => newTask(\"Done\", \"doneTasks\")}\n                      >\n                        <i className=\"uil-plus\"></i>\n                      </button>\n                    </OverlayTrigger>\n                    <h5 className=\"mt-0 task-header header-title\">\n                      Done ({state.doneTasks.length})\n                    </h5>\n                    {state.doneTasks.length === 0 && (\n                      <p className=\"text-center text-muted pt-2 mb-0\">\n                        No Tasks\n                      </p>\n                    )}\n\n                    {state.doneTasks.map((item, index) => (\n                      <Draggable\n                        key={item.id}\n                        draggableId={item.id + \"\"}\n                        index={index}\n                      >\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                          >\n                            <TaskItem task={item} />\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n          </DragDropContext>\n        </Col>\n      </Row>\n\n      {/* add new task modal */}\n      {newTaskModal && (\n        <AddNewTask\n          newTaskModal={newTaskModal}\n          toggleNewTaskModal={toggleNewTaskModal}\n          handleNewTask={handleNewTask}\n          handleSubmit={handleSubmit}\n          newTaskDetails={newTaskDetails}\n          handleDateChange={handleDateChange}\n          register={register}\n          errors={errors}\n          control={control}\n        />\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default Kanban;\n"],"names":["DatepickerInput","forwardRef","props","ref","_jsx","type","className","classNames","inputClass","onClick","value","onChange","onDateValueChange","console","log","DatepickerInputWithAddon","_jsxs","children","readOnly","input","hideAddon","_Fragment","DatePicker","calendarClassName","selectsRange","startDate","endDate","selected","date","customInput","timeIntervals","tI","showTimeSelect","timeFormat","timeCaption","dateFormat","minDate","maxDate","monthsShown","showTimeSelectOnly","inline","autoComplete","Row","Col","title","Breadcrumb","listProps","href","breadCrumbItems","map","item","index","active","label","path","_ref","defaultValues","resolver","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","noValidate","Array","isArray","child","name","React","key","TextualInput","placeholder","comp","rows","refCallback","otherProps","Form","as","id","r","isInvalid","CheckInput","_ref2","SelectInput","_ref3","FormInputGroup","_ref4","startIcon","textClassName","InputGroup","_ref5","labelClassName","containerClass","action","newTask","xs","Card","sm","FeatherIcons","icon","Dropdown","Button","task","align","Link","to","priority","src","userAvatar","alt","totalComments","subTaskCompleted","totalSubTasks","dueDate","newTaskModal","toggleNewTaskModal","handleNewTask","newTaskDetails","handleDateChange","Modal","show","onHide","size","centered","closeButton","FormInput","md","defaultValue","ShreyuDatepicker","variant","tasks","status","avatar5","avatar6","avatar2","avatar7","avatar3","avatar4","Kanban","state","setState","useState","todoTasks","filter","t","inprogressTasks","reviewTasks","doneTasks","totalTasks","setTotalTasks","length","setNewTaskModal","setNewTaskDetails","schemaResolver","yupResolver","yup","shape","required","reset","queue","Date","defaultAvatar","getList","modifiedState","PageTitle","TaskDetails","DragDropContext","onDragEnd","result","source","destination","droppableId","items","reorder","list","startIndex","endIndex","from","removed","splice","localState","move","droppableSource","droppableDestination","sourceClone","destClone","Droppable","provided","snapshot","innerRef","OverlayTrigger","placement","overlay","Tooltip","Draggable","draggableId","draggableProps","dragHandleProps","TaskItem","AddNewTask","prevstate","values","formData","toLocaleDateString","year","month","day"],"sourceRoot":""}