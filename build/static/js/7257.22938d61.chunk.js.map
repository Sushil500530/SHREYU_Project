{"version":3,"file":"static/js/7257.22938d61.chunk.js","mappings":"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","sources":["components/VerticalForm.tsx","components/FormInput.tsx","pages/apps/Email/Compose.tsx"],"sourcesContent":["import React from \"react\";\nimport { useForm, Resolver, SubmitHandler } from \"react-hook-form\";\n\ninterface VerticalFromProps<TFormValues> {\n  defaultValues?: any;\n  resolver?: Resolver<TFormValues>;\n  children?: any;\n  onSubmit: SubmitHandler<TFormValues>;\n  formClass?: string;\n}\n\nconst VerticalForm = <\n  TFormValues extends Record<string, any> = Record<string, any>\n>({\n  defaultValues,\n  resolver,\n  children,\n  onSubmit,\n  formClass,\n}: VerticalFromProps<TFormValues>) => {\n  /*\n   * form methods\n   */\n  const methods = useForm<TFormValues>({ defaultValues, resolver });\n  const {\n    handleSubmit,\n    register,\n    control,\n    formState: { errors },\n  } = methods;\n\n  return (\n    <form onSubmit={handleSubmit(onSubmit)} className={formClass} noValidate>\n      {Array.isArray(children)\n        ? children.map((child) => {\n            return child.props && child.props.name\n              ? React.createElement(child.type, {\n                  ...{\n                    ...child.props,\n                    register,\n                    key: child.props.name,\n                    errors,\n                    control,\n                  },\n                })\n              : child;\n          })\n        : children}\n    </form>\n  );\n};\n\nexport default VerticalForm;\n","import React, { InputHTMLAttributes } from \"react\";\nimport { Form, InputGroup } from \"react-bootstrap\";\n\nimport { FieldErrors, Control } from \"react-hook-form\";\n\ninterface FormInputProps extends InputHTMLAttributes<HTMLInputElement> {\n  startIcon?: any;\n  label?: string;\n  type?: string;\n  name: string;\n  comp?: string;\n  placeholder?: string;\n  register?: any;\n  errors?: FieldErrors;\n  control?: Control<any>;\n  className?: string;\n  labelClassName?: string;\n  containerClass?: string;\n  textClassName?: string;\n  refCallback?: any;\n  action?: any;\n  rows?: string | number;\n}\n\n// textual form-controlsâ€”like inputs, passwords, textareas etc.\nconst TextualInput = ({\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Control\n        type={type}\n        placeholder={placeholder}\n        name={name}\n        as={comp}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        rows={rows}\n        {...otherProps}\n      ></Form.Control>\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\" className=\"d-block\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// non-textual checkbox and radio controls\nconst CheckInput = ({\n  type,\n  label,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Check\n        type={type}\n        label={label}\n        name={name}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        {...otherProps}\n      />\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// handle select controls\nconst SelectInput = ({\n  type,\n  label,\n  name,\n  placeholder,\n  register,\n  errors,\n  comp,\n  rows,\n  className,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <>\n      <Form.Select\n        type={type}\n        label={label}\n        name={name}\n        id={name}\n        ref={(r: HTMLInputElement) => {\n          if (refCallback) refCallback(r);\n        }}\n        className={className}\n        isInvalid={errors && errors[name] ? true : false}\n        {...(register ? register(name) : {})}\n        {...otherProps}\n      />\n\n      {errors && errors[name] ? (\n        <Form.Control.Feedback type=\"invalid\">\n          {errors[name][\"message\"]}\n        </Form.Control.Feedback>\n      ) : null}\n    </>\n  );\n};\n\n// extend textual form-controls with add-ons\nconst FormInputGroup = ({\n  startIcon,\n  type,\n  name,\n  placeholder,\n  comp,\n  register,\n  errors,\n  rows,\n  className,\n  textClassName,\n  refCallback,\n  ...otherProps\n}: FormInputProps) => {\n  return (\n    <InputGroup>\n      <InputGroup.Text className={textClassName}>{startIcon}</InputGroup.Text>\n      {type === \"select\" ? (\n        <SelectInput\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          refCallback={refCallback}\n          comp={comp}\n          errors={errors}\n          register={register}\n          className={className}\n          rows={rows}\n          {...otherProps}\n        />\n      ) : (\n        <TextualInput\n          type={type}\n          name={name}\n          placeholder={placeholder}\n          refCallback={refCallback}\n          comp={comp}\n          errors={errors}\n          register={register}\n          className={className}\n          rows={rows}\n          {...otherProps}\n        />\n      )}\n    </InputGroup>\n  );\n};\n\nconst FormInput = ({\n  startIcon,\n  label,\n  type,\n  name,\n  placeholder,\n  register,\n  errors,\n  control,\n  className,\n  labelClassName,\n  containerClass,\n  textClassName,\n  refCallback,\n  action,\n  rows,\n  ...otherProps\n}: FormInputProps) => {\n  // handle input type\n  const comp =\n    type === \"textarea\" ? \"textarea\" : type === \"select\" ? \"select\" : \"input\";\n\n  return (\n    <>\n      {type === \"hidden\" ? (\n        <input\n          type={type}\n          name={name}\n          {...(register ? register(name) : {})}\n          {...otherProps}\n        />\n      ) : (\n        <>\n          {type === \"checkbox\" || type === \"radio\" ? (\n            <Form.Group className={containerClass}>\n              <CheckInput\n                type={type}\n                label={label}\n                name={name}\n                placeholder={placeholder}\n                refCallback={refCallback}\n                errors={errors}\n                register={register}\n                comp={comp}\n                className={className}\n                rows={rows}\n                {...otherProps}\n              />\n            </Form.Group>\n          ) : type === \"select\" ? (\n            <Form.Group className={containerClass}>\n              {label ? (\n                <>\n                  <Form.Label className={labelClassName}>{label}</Form.Label>\n                  {action && action}\n                </>\n              ) : null}\n              {startIcon ? (\n                <FormInputGroup\n                  type={type}\n                  startIcon={startIcon}\n                  name={name}\n                  comp={comp}\n                  textClassName={textClassName}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              ) : (\n                <SelectInput\n                  type={type}\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  comp={comp}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              )}\n            </Form.Group>\n          ) : (\n            <Form.Group className={containerClass}>\n              {label ? (\n                <>\n                  <Form.Label className={labelClassName}>{label}</Form.Label>\n                  {action && action}\n                </>\n              ) : null}\n              {startIcon ? (\n                <FormInputGroup\n                  type={type}\n                  startIcon={startIcon}\n                  name={name}\n                  comp={comp}\n                  textClassName={textClassName}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              ) : (\n                <TextualInput\n                  type={type}\n                  name={name}\n                  placeholder={placeholder}\n                  refCallback={refCallback}\n                  errors={errors}\n                  register={register}\n                  comp={comp}\n                  className={className}\n                  rows={rows}\n                  {...otherProps}\n                />\n              )}\n            </Form.Group>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default FormInput;\n","import React, { useState, useEffect } from \"react\";\nimport { Row, Col, Button } from \"react-bootstrap\";\nimport * as yup from \"yup\";\nimport { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Link } from \"react-router-dom\";\n\n// Form Editor\nimport { Editor } from \"react-draft-wysiwyg\";\nimport { EditorState, convertToRaw, ContentState } from \"draft-js\";\nimport draftToHtml from \"draftjs-to-html\";\nimport htmlToDraft from \"html-to-draftjs\";\n// styles\nimport \"react-draft-wysiwyg/dist/react-draft-wysiwyg.css\";\n\n// components\nimport PageTitle from \"../../../components/PageTitle\";\nimport { VerticalForm, FormInput } from \"../../../components/\";\n\nimport LeftBar from \"./LeftBar\";\n\n// dummy data\nimport { emails } from \"./data\";\n\nconst Compose = () => {\n  const [editorState, setEditorState] = useState<any>();\n  const [totalUnreadEmails] = useState<number>(\n    emails.filter((e: any) => e.is_read === false).length\n  );\n\n  useEffect(() => {\n    const html = `<h3>This is an Air-mode editable area.</h3>\n            <ul> \n                <li>Select a text to reveal the toolbar.</li>\n                <li>Edit rich document on-the-fly, so elastic!</li>\n            </ul>\n            <p>End of air-mode area</p>`;\n    const contentBlock = htmlToDraft(html);\n    if (contentBlock) {\n      const contentState = ContentState.createFromBlockArray(\n        contentBlock.contentBlocks\n      );\n      setEditorState(EditorState.createWithContent(contentState));\n    }\n  }, []);\n\n  const schemaResolver = yupResolver(\n    yup.object().shape({\n      to: yup.string().required(\"Please specify to email\"),\n      subject: yup.string().required(\"Please specify subject\"),\n    })\n  );\n\n  /**\n   * Handles the save\n   * @param {*} event\n   * @param {*} values\n   */\n  const handleEmailSave = (event: any, values: any) => {\n    const body = draftToHtml(convertToRaw(editorState.getCurrentContent()));\n    console.log({ ...values, body });\n  };\n\n  /**\n   * On editor body change\n   */\n  const onEditorStateChange = (editorStates: any) => {\n    setEditorState(editorStates);\n  };\n\n  return (\n    <>\n      <PageTitle\n        breadCrumbItems={[\n          { label: \"Email\", path: \"/apps/email/compose\" },\n          { label: \"Compose Email\", path: \"/apps/email/compose\", active: true },\n        ]}\n        title={\"Compose Email\"}\n      />\n      <Row>\n        <Col>\n          <div className=\"email-container\">\n            <div className=\"inbox-leftbar\">\n              <Link to=\"/apps/email/inbox\" className=\"btn btn-danger d-block\">\n                Inbox\n              </Link>\n              <LeftBar\n                showChatDetails={false}\n                totalUnreadEmails={totalUnreadEmails}\n              />\n            </div>\n\n            <div className=\"inbox-rightbar p-4\">\n              <div>\n                <VerticalForm\n                  onSubmit={handleEmailSave}\n                  resolver={schemaResolver}\n                >\n                  <FormInput\n                    type=\"email\"\n                    name=\"to\"\n                    placeholder=\"To\"\n                    containerClass={\"mb-3\"}\n                  />\n                  <FormInput\n                    type=\"text\"\n                    name=\"subject\"\n                    placeholder=\"Subject\"\n                    containerClass={\"mb-3\"}\n                  />\n\n                  <div className=\"mb-3 card border-0\">\n                    <Editor\n                      editorState={editorState}\n                      toolbarClassName=\"toolbarClassName\"\n                      wrapperClassName=\"wrapperClassName border border-1 border-soft-dark mb-3 card\"\n                      editorClassName=\"editorClassName px-2 pt-0\"\n                      editorStyle={{ minHeight: \"300px\" }}\n                      onEditorStateChange={onEditorStateChange}\n                    />\n                  </div>\n\n                  <div className=\"mb-3 pt-2\">\n                    <div className=\"text-end\">\n                      <Button variant=\"success\" className=\"me-1\">\n                        <i className=\"uil uil-envelope-edit\"></i> Draft\n                      </Button>\n                      <Button type=\"submit\">\n                        {\" \"}\n                        <span>Send</span>\n                        <i className=\"uil uil-message ms-2\"></i>\n                      </Button>\n                    </div>\n                  </div>\n                </VerticalForm>\n              </div>\n            </div>\n\n            <div className=\"clearfix\"></div>\n          </div>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default Compose;\n"],"names":["_ref","defaultValues","resolver","children","onSubmit","formClass","methods","useForm","handleSubmit","register","control","formState","errors","_jsx","className","noValidate","Array","isArray","map","child","props","name","React","type","key","TextualInput","placeholder","comp","rows","refCallback","otherProps","_jsxs","_Fragment","Form","as","id","ref","r","isInvalid","CheckInput","_ref2","label","SelectInput","_ref3","FormInputGroup","_ref4","startIcon","textClassName","InputGroup","_ref5","labelClassName","containerClass","action","Compose","editorState","setEditorState","useState","totalUnreadEmails","emails","e","is_read","length","useEffect","contentBlock","htmlToDraft","contentState","ContentState","contentBlocks","EditorState","schemaResolver","yupResolver","yup","shape","to","required","subject","PageTitle","breadCrumbItems","path","active","title","Row","Col","Link","LeftBar","showChatDetails","VerticalForm","handleEmailSave","event","values","body","draftToHtml","convertToRaw","getCurrentContent","console","log","FormInput","Editor","toolbarClassName","wrapperClassName","editorClassName","editorStyle","minHeight","onEditorStateChange","editorStates","Button","variant"],"sourceRoot":""}